generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum SubscriptionType {
  FREE
  PRO
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  subscriptionType      SubscriptionType       @default(FREE)
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Subscription          Subscription[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum Toolkit {
  NEXT_JS
  REACT
  FIGMA
  FRAMER_MOTION
  TAILWIND
}

enum Category {
  STARTUP_LANDING_PAGE
  SAAS_LANDING_PAGE
  SAAS_WAITLIST
  AGENCY_WEBSITE
  MARKETING_PAGE
  DEV_PORTFOLIO
}

model Product {
  id                  String    @id @default(uuid())
  title               String
  coverImage          String
  imgOne              String
  imgTwo              String
  imgThree            String
  imgFour             String
  imgFive             String
  price               String
  description         String
  detailedDescription String
  pages               String
  category            Category
  previewLink         String
  figmaLink           String
  figmaEmbed          String    @default("null")
  productVideo        String    @default("null")
  codeLink            String
  createdAt           DateTime  @default(now())
  toolkit             Toolkit[]
}

model Subscription {
  id                 Int       @id @default(autoincrement())
  lemonSqueezyId     Int       @unique
  orderId            Int       @unique
  name               String
  email              String
  status             String
  renewsAt           DateTime?
  endsAt             DateTime?
  trialEndsAt        DateTime?
  resumesAt          DateTime?
  userId             String    @unique
  isUsageBased       Boolean   @default(false)
  subscriptionItemId Int?      @unique
  user               User      @relation(fields: [userId], references: [id])
  customerId         Int?

  @@index([lemonSqueezyId])
}
